// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: game.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceServerClient is the client API for ServiceServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceServerClient interface {
	Getname(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetNameReply, error)
	MGetOname(ctx context.Context, opts ...grpc.CallOption) (ServiceServer_MGetOnameClient, error)
	OGetMname(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (ServiceServer_OGetMnameClient, error)
	MGetMname(ctx context.Context, opts ...grpc.CallOption) (ServiceServer_MGetMnameClient, error)
}

type serviceServerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceServerClient(cc grpc.ClientConnInterface) ServiceServerClient {
	return &serviceServerClient{cc}
}

func (c *serviceServerClient) Getname(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (*GetNameReply, error) {
	out := new(GetNameReply)
	err := c.cc.Invoke(ctx, "/pb.ServiceServer/Getname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceServerClient) MGetOname(ctx context.Context, opts ...grpc.CallOption) (ServiceServer_MGetOnameClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceServer_ServiceDesc.Streams[0], "/pb.ServiceServer/MGetOname", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServerMGetOnameClient{stream}
	return x, nil
}

type ServiceServer_MGetOnameClient interface {
	Send(*GetIdRequest) error
	CloseAndRecv() (*GetNameReply, error)
	grpc.ClientStream
}

type serviceServerMGetOnameClient struct {
	grpc.ClientStream
}

func (x *serviceServerMGetOnameClient) Send(m *GetIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceServerMGetOnameClient) CloseAndRecv() (*GetNameReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetNameReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceServerClient) OGetMname(ctx context.Context, in *GetIdRequest, opts ...grpc.CallOption) (ServiceServer_OGetMnameClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceServer_ServiceDesc.Streams[1], "/pb.ServiceServer/OGetMname", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServerOGetMnameClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceServer_OGetMnameClient interface {
	Recv() (*GetNameReply, error)
	grpc.ClientStream
}

type serviceServerOGetMnameClient struct {
	grpc.ClientStream
}

func (x *serviceServerOGetMnameClient) Recv() (*GetNameReply, error) {
	m := new(GetNameReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceServerClient) MGetMname(ctx context.Context, opts ...grpc.CallOption) (ServiceServer_MGetMnameClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceServer_ServiceDesc.Streams[2], "/pb.ServiceServer/MGetMname", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceServerMGetMnameClient{stream}
	return x, nil
}

type ServiceServer_MGetMnameClient interface {
	Send(*GetIdRequest) error
	Recv() (*GetNameReply, error)
	grpc.ClientStream
}

type serviceServerMGetMnameClient struct {
	grpc.ClientStream
}

func (x *serviceServerMGetMnameClient) Send(m *GetIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serviceServerMGetMnameClient) Recv() (*GetNameReply, error) {
	m := new(GetNameReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServerServer is the server API for ServiceServer service.
// All implementations must embed UnimplementedServiceServerServer
// for forward compatibility
type ServiceServerServer interface {
	Getname(context.Context, *GetIdRequest) (*GetNameReply, error)
	MGetOname(ServiceServer_MGetOnameServer) error
	OGetMname(*GetIdRequest, ServiceServer_OGetMnameServer) error
	MGetMname(ServiceServer_MGetMnameServer) error
	mustEmbedUnimplementedServiceServerServer()
}

// UnimplementedServiceServerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServerServer struct {
}

func (UnimplementedServiceServerServer) Getname(context.Context, *GetIdRequest) (*GetNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getname not implemented")
}
func (UnimplementedServiceServerServer) MGetOname(ServiceServer_MGetOnameServer) error {
	return status.Errorf(codes.Unimplemented, "method MGetOname not implemented")
}
func (UnimplementedServiceServerServer) OGetMname(*GetIdRequest, ServiceServer_OGetMnameServer) error {
	return status.Errorf(codes.Unimplemented, "method OGetMname not implemented")
}
func (UnimplementedServiceServerServer) MGetMname(ServiceServer_MGetMnameServer) error {
	return status.Errorf(codes.Unimplemented, "method MGetMname not implemented")
}
func (UnimplementedServiceServerServer) mustEmbedUnimplementedServiceServerServer() {}

// UnsafeServiceServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServerServer will
// result in compilation errors.
type UnsafeServiceServerServer interface {
	mustEmbedUnimplementedServiceServerServer()
}

func RegisterServiceServerServer(s grpc.ServiceRegistrar, srv ServiceServerServer) {
	s.RegisterService(&ServiceServer_ServiceDesc, srv)
}

func _ServiceServer_Getname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServerServer).Getname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ServiceServer/Getname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServerServer).Getname(ctx, req.(*GetIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceServer_MGetOname_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServerServer).MGetOname(&serviceServerMGetOnameServer{stream})
}

type ServiceServer_MGetOnameServer interface {
	SendAndClose(*GetNameReply) error
	Recv() (*GetIdRequest, error)
	grpc.ServerStream
}

type serviceServerMGetOnameServer struct {
	grpc.ServerStream
}

func (x *serviceServerMGetOnameServer) SendAndClose(m *GetNameReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceServerMGetOnameServer) Recv() (*GetIdRequest, error) {
	m := new(GetIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ServiceServer_OGetMname_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetIdRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceServerServer).OGetMname(m, &serviceServerOGetMnameServer{stream})
}

type ServiceServer_OGetMnameServer interface {
	Send(*GetNameReply) error
	grpc.ServerStream
}

type serviceServerOGetMnameServer struct {
	grpc.ServerStream
}

func (x *serviceServerOGetMnameServer) Send(m *GetNameReply) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceServer_MGetMname_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServiceServerServer).MGetMname(&serviceServerMGetMnameServer{stream})
}

type ServiceServer_MGetMnameServer interface {
	Send(*GetNameReply) error
	Recv() (*GetIdRequest, error)
	grpc.ServerStream
}

type serviceServerMGetMnameServer struct {
	grpc.ServerStream
}

func (x *serviceServerMGetMnameServer) Send(m *GetNameReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serviceServerMGetMnameServer) Recv() (*GetIdRequest, error) {
	m := new(GetIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServiceServer_ServiceDesc is the grpc.ServiceDesc for ServiceServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ServiceServer",
	HandlerType: (*ServiceServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getname",
			Handler:    _ServiceServer_Getname_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MGetOname",
			Handler:       _ServiceServer_MGetOname_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "OGetMname",
			Handler:       _ServiceServer_OGetMname_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "MGetMname",
			Handler:       _ServiceServer_MGetMname_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}
